package profitSwitch

import (
	"bufio"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"strings"
)

type poolsEntry struct {
	PoolAddress    string `json:"pool_address"`
	WalletAddress  string `json:"wallet_address"`
	RigID          string `json:"rig_id"`
	PoolPassword   string `json:"pool_password"`
	UseNicehash    bool   `json:"use_nicehash"`
	UseTLS         bool   `json:"use_tls"`
	TLSFingerprint string `json:"tls_fingerprint"`
	PoolWeight     int    `json:"pool_weight"`
}

type poolsFile struct {
	pools []poolsEntry
	algo  string
}

type PoolsFile interface {
	WriteFile() error
	ReadFile() error
}

func NewPoolsFile() *poolsFile {
	p := poolsFile{}
	p.pools = make([]poolsEntry, 0, 10)
	return &p
}

func (p *poolsFile) Read(r io.ReadCloser) error {
	type AutoGenerated struct {
		PoolList []poolsEntry `json:"pool_list"`
		Currency string       `json:"currency"`
	}

	scanner := bufio.NewScanner(r)
	defer func() { _ = r.Close() }()

	scanner.Split(bufio.ScanLines)
	var js string
	var removeComments = func(s string) string {
		var rtnString string
		switch {
		case strings.HasPrefix(s, "/*"):
		case strings.HasPrefix(s, " *"):
		case strings.Contains(s, "//"):
		default:
			rtnString += s
		}

		return rtnString
	}

	for scanner.Scan() {
		s := scanner.Text()

		js += removeComments(s)
	}

	// encase in curly's
	js = "{" + js + "}"
	// remove trailing comma's
	js = strings.NewReplacer("},]", "}]", ",}", "}").Replace(js)

	if err := scanner.Err(); err != nil {
		return fmt.Errorf("invalid input: %s", err)
	}

	tempVar := &AutoGenerated{}
	if err := json.Unmarshal([]byte(js), tempVar); err != nil {
		return fmt.Errorf("parsing error %s \n I managed to build %+v", err, js)
	}

	p.algo = tempVar.Currency
	p.pools = tempVar.PoolList

	return nil
}

func (p *poolsFile) Write(rwc io.WriteCloser) (err error) {
	var header = fmt.Sprintf("\"pool_list\" :\n")
	var footer = fmt.Sprintf("\n\n")

	jsTmp, err := json.MarshalIndent(p.pools, "", "    ")
	stakStyle := header

	stakStyle += string(jsTmp) + ","
	stakStyle += footer
	stakStyle += fmt.Sprintf("    %q : %q,", "currency", p.algo)
	if err != nil {
		return
	}

	// remove curly's
	// stakStyle = stakStyle[:len(stakStyle)-1]
	// stakStyle = stakStyle[1:]
	// stakStyle += ","

	if _, err = rwc.Write([]byte(stakStyle)); err != nil {
		log.Fatalf("failed to write pools.txt")
	}

	return rwc.Close()

}
